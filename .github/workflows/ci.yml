name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Run flake8 with our custom configuration (allows warnings but catches critical errors)
        flake8 . --count --statistics

    - name: Type check with mypy (allow failures)
      run: |
        mypy --ignore-missing-imports --no-strict-optional . || echo "‚ö†Ô∏è MyPy checks failed but continuing build"
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: .

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t meistrocraft:test .

    - name: Test Docker image
      run: |
        # Start the container in detached mode
        docker run -d --name meistrocraft-test -p 8000:8000 meistrocraft:test
        
        # Wait for the container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test main page
        curl -f http://localhost:8000/ || exit 1
        
        # Stop the container
        docker stop meistrocraft-test

    - name: Test Docker Compose
      run: |
        # Test Docker Compose build
        docker-compose build
        
        # Test Docker Compose up (detached)
        docker-compose up -d
        
        # Wait for services to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Stop services
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'meistrocraft:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  performance-test:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and start container
      run: |
        docker build -t meistrocraft:perf .
        docker run -d --name meistrocraft-perf -p 8000:8000 meistrocraft:perf
        sleep 30

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        cat << 'EOF' > performance-test.js
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '30s', target: 10 },
            { duration: '30s', target: 20 },
            { duration: '30s', target: 0 },
          ],
        };

        export default function () {
          let response = http.get('http://localhost:8000/health');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          sleep(1);
        }
        EOF
        
        k6 run performance-test.js

    - name: Stop container
      run: |
        docker stop meistrocraft-perf

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        enable_jekyll: false
      continue-on-error: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan, performance-test]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "‚úÖ All tests passed! Docker build successful."
        echo "üöÄ MeistroCraft is ready for deployment!"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "‚ùå Tests failed or Docker build failed."
        echo "üîß Please check the logs and fix the issues."
        exit 1